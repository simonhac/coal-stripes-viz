diff --git a/MY TODOS.md b/MY TODOS.md
index 638d994..97cdc85 100644
--- a/MY TODOS.md	
+++ b/MY TODOS.md	
@@ -1,9 +1,56 @@
-add caching to server
+* drag gesture
+* log retries
+* handle network errors
+* prefetching
+* more elegant behaviour for 2005 and before
 
-drag gesture
 
-log retries
 
-handle retry errors
 
-find out how far we can go back and fix errors
+ 1. Fixed Linting Issues
+
+  - Fixed missing dependency monthBars in useEffect hook in CapFacXAxis.tsx by adding it to the dependency array
+  - Removed unused variable hoveredDay from CompositeTile.tsx interface and props
+  - Wrapped the monthBars array creation in a useMemo hook to prevent recreation on every render
+  - Added useMemo import to CapFacXAxis.tsx
+
+  2. Redesigned Tooltip System for Day Hovers
+
+  Initially, we had a system where hovering over a day would show month tooltips in other regions. We changed this to show
+  day-specific capacity factors instead:
+
+  - Removed the isExplicit flag from hoveredMonth (it was used to distinguish between explicit month hovers vs derived from
+  day hovers)
+  - Added hoveredRegion state to track which region is currently being hovered
+  - Added isHoveredRegion prop to RegionSection and CapFacXAxis components
+  - Modified the tooltip logic so that:
+    - When hovering over a day in one region, that region shows its detailed day tooltip
+    - All OTHER regions show their weighted average capacity factor for that specific day
+    - Month tooltips only show when explicitly hovering over month labels
+
+  3. Implemented Day Capacity Factor Calculation
+
+  - Added getRegionDayCapacityFactor method to CapFacYear interface and implementation
+  - Added getCapacityFactorForDay method to FacilityYearTile class to calculate capacity-weighted average for a specific day
+  - Made facility property public readonly in FacilityYearTile class
+  - Created clean encapsulation of the calculation logic in the data model
+
+  4. Debugged Tooltip Display Issues
+
+  When tooltips weren't showing, we added extensive logging and discovered:
+  - Year data was being loaded correctly (2024 and 2025 were in cache)
+  - The issue was that getRegionDayCapacityFactor was finding 0 facilities for each region
+  - Fixed the bug: we were checking unit.region and unit.network but these properties are on the Facility interface, not
+  GeneratingUnit
+  - Changed the logic to use facility.region and facility.network instead
+
+  5. Other Changes
+
+  - Added getCachedYears debug method to YearDataVendor (using LRUCache's getStats method)
+  - Fixed various dependency arrays in useEffects
+  - Added and then offered to remove debug console.log statements
+
+  The main achievement was transforming the tooltip system from showing month averages to showing day-specific capacity
+  factors when hovering over stripes, while maintaining the month tooltip functionality for the X-axis labels.
+
+
diff --git a/src/app/page.tsx b/src/app/page.tsx
index 827e969..6e80d2a 100644
--- a/src/app/page.tsx
+++ b/src/app/page.tsx
@@ -18,6 +18,9 @@ export default function Home() {
   const [endDate, setEndDate] = useState<CalendarDate | null>(null);
   const [facilitiesByRegion, setFacilitiesByRegion] = useState<Map<string, { code: string; name: string }[]>>(new Map());
   const [boundaryFlash, setBoundaryFlash] = useState(false);
+  const [showRegionAverages, setShowRegionAverages] = useState(false);
+  const [hoveredMonth, setHoveredMonth] = useState<{ year: number; month: number } | null>(null);
+  const [hoveredDay, setHoveredDay] = useState<CalendarDate | null>(null);
   const containerRef = useRef<HTMLDivElement>(null);
   
   // Get animated date range
@@ -189,6 +192,15 @@ export default function Home() {
                 endDate={endDate!}
                 animatedDateRange={animatedDateRange}
                 onMonthClick={handleMonthClick}
+                showRegionAverage={showRegionAverages}
+                onRegionHover={() => setShowRegionAverages(true)}
+                onRegionHoverEnd={() => setShowRegionAverages(false)}
+                hoveredMonth={hoveredMonth || (hoveredDay ? { year: hoveredDay.year, month: hoveredDay.month } : null)}
+                onMonthHover={(year: number, month: number) => setHoveredMonth({ year, month })}
+                onMonthHoverEnd={() => setHoveredMonth(null)}
+                hoveredDay={hoveredDay}
+                onDayHover={(day: CalendarDate) => setHoveredDay(day)}
+                onDayHoverEnd={() => setHoveredDay(null)}
               />
             );
           })}
diff --git a/src/components/CapFacXAxis.tsx b/src/components/CapFacXAxis.tsx
index d382fd6..b65d290 100644
--- a/src/components/CapFacXAxis.tsx
+++ b/src/components/CapFacXAxis.tsx
@@ -12,6 +12,9 @@ interface CapFacXAxisProps {
   onHover?: (tooltipData: any) => void;
   onHoverEnd?: () => void;
   onMonthClick?: (year: number, month: number) => void;
+  hoveredMonth?: { year: number; month: number } | null;
+  onMonthHover?: (year: number, month: number) => void;
+  onMonthHoverEnd?: () => void;
 }
 
 export function CapFacXAxis({ 
@@ -20,7 +23,10 @@ export function CapFacXAxis({
   regionName,
   onHover,
   onHoverEnd,
-  onMonthClick
+  onMonthClick,
+  hoveredMonth,
+  onMonthHover,
+  onMonthHoverEnd
 }: CapFacXAxisProps) {
   const [yearDataMap, setYearDataMap] = useState<Map<number, CapFacYear>>(new Map());
   const [useShortLabels, setUseShortLabels] = useState(false);
@@ -146,14 +152,15 @@ export function CapFacXAxis({
   }
   
   const handleMouseEnter = (month: typeof monthBars[0]) => {
-    if (onHover) {
-      onHover({
-        startDate: month.date,
-        endDate: null,
-        label: regionName,
-        capacityFactor: month.capacityFactor,
-        tooltipType: 'month'
-      });
+    // Trigger global month hover
+    if (onMonthHover) {
+      onMonthHover(month.date.year, month.date.month);
+    }
+  };
+  
+  const handleMouseLeave = () => {
+    if (onMonthHoverEnd) {
+      onMonthHoverEnd();
     }
   };
 
@@ -162,6 +169,29 @@ export function CapFacXAxis({
       onMonthClick(month.date.year, month.date.month);
     }
   };
+  
+  // Show tooltip for the hovered month
+  React.useEffect(() => {
+    if (hoveredMonth && onHover) {
+      // Find the matching month in our monthBars
+      const matchingMonth = monthBars.find(m => 
+        m.date.year === hoveredMonth.year && 
+        m.date.month === hoveredMonth.month
+      );
+      
+      if (matchingMonth) {
+        onHover({
+          startDate: matchingMonth.date,
+          endDate: null,
+          label: regionName,
+          capacityFactor: matchingMonth.capacityFactor,
+          tooltipType: 'month'
+        });
+      }
+    } else if (!hoveredMonth && onHoverEnd) {
+      onHoverEnd();
+    }
+  }, [hoveredMonth, onHover, onHoverEnd, regionName]); // Removed monthBars from dependencies
 
   return (
     <div className="opennem-stripe-row" style={{ display: 'flex' }}>
@@ -182,7 +212,7 @@ export function CapFacXAxis({
                   cursor: onMonthClick ? 'pointer' : 'default'
                 }}
                 onMouseEnter={() => handleMouseEnter(month)}
-                onMouseLeave={onHoverEnd}
+                onMouseLeave={handleMouseLeave}
                 onClick={() => handleMonthClick(month)}
               >
                 {useShortLabels ? month.labelShort : month.labelLong}
diff --git a/src/components/CompositeTile.tsx b/src/components/CompositeTile.tsx
index d21fed3..a82bf39 100644
--- a/src/components/CompositeTile.tsx
+++ b/src/components/CompositeTile.tsx
@@ -15,6 +15,9 @@ interface CompositeTileProps {
   onHover?: (tooltipData: any) => void;
   onHoverEnd?: () => void;
   minCanvasHeight?: number;
+  hoveredDay?: CalendarDate | null;
+  onDayHover?: (day: CalendarDate) => void;
+  onDayHoverEnd?: () => void;
 }
 
 type TileState = 'hasData' | 'pendingData' | 'error' | 'idle';
@@ -35,7 +38,10 @@ const CompositeTileComponent = React.forwardRef<CompositeTileRef, CompositeTileP
   animatedDateRange,
   onHover,
   onHoverEnd,
-  minCanvasHeight = 20
+  minCanvasHeight = 20,
+  hoveredDay,
+  onDayHover,
+  onDayHoverEnd
 }: CompositeTileProps, ref) => {
   const canvasRef = useRef<HTMLCanvasElement>(null);
   
@@ -586,6 +592,8 @@ const CompositeTileComponent = React.forwardRef<CompositeTileRef, CompositeTileP
     return () => window.removeEventListener('scroll', handleScroll);
   }, [updateTooltip, onHoverEnd, facilityCode]);
   
+  // Don't need a separate effect - the month hover is already handled by RegionSection
+  
   const handleMouseMove = (e: React.MouseEvent<HTMLCanvasElement>) => {
     const canvas = e.currentTarget;
     const rect = canvas.getBoundingClientRect();
@@ -604,6 +612,12 @@ const CompositeTileComponent = React.forwardRef<CompositeTileRef, CompositeTileP
       const percentage = (dayColumn / 365) * 100;
       // Set on document root so all regions share the same hover position
       document.documentElement.style.setProperty('--hover-x', `${percentage}%`);
+      
+      // Update global day hover
+      if (onDayHover) {
+        const hoveredDate = dateRange.start.add({ days: dayColumn });
+        onDayHover(hoveredDate);
+      }
     }
   };
 
@@ -611,6 +625,7 @@ const CompositeTileComponent = React.forwardRef<CompositeTileRef, CompositeTileP
     <div className="opennem-stripe-row" style={{ display: 'flex' }}>
       <div 
         className="opennem-facility-label"
+        style={{ cursor: 'pointer' }}
         onMouseEnter={() => {
           if (onHover) {
             const avgCapacityFactor = calculateFacilityAverage();
@@ -647,6 +662,9 @@ const CompositeTileComponent = React.forwardRef<CompositeTileRef, CompositeTileP
             if (onHoverEnd) {
               onHoverEnd();
             }
+            if (onDayHoverEnd) {
+              onDayHoverEnd();
+            }
           }}
         />
       </div>
diff --git a/src/components/RegionSection.tsx b/src/components/RegionSection.tsx
index 0fe88b7..1c61e23 100644
--- a/src/components/RegionSection.tsx
+++ b/src/components/RegionSection.tsx
@@ -13,6 +13,15 @@ interface RegionSectionProps {
   endDate: CalendarDate;
   animatedDateRange: { start: CalendarDate; end: CalendarDate } | null;
   onMonthClick: (year: number, month: number) => void;
+  showRegionAverage?: boolean;
+  onRegionHover?: () => void;
+  onRegionHoverEnd?: () => void;
+  hoveredMonth?: { year: number; month: number } | null;
+  onMonthHover?: (year: number, month: number) => void;
+  onMonthHoverEnd?: () => void;
+  hoveredDay?: CalendarDate | null;
+  onDayHover?: (day: CalendarDate) => void;
+  onDayHoverEnd?: () => void;
 }
 
 export function RegionSection({
@@ -21,7 +30,16 @@ export function RegionSection({
   facilities,
   endDate,
   animatedDateRange,
-  onMonthClick
+  onMonthClick,
+  showRegionAverage = false,
+  onRegionHover,
+  onRegionHoverEnd,
+  hoveredMonth,
+  onMonthHover,
+  onMonthHoverEnd,
+  hoveredDay,
+  onDayHover,
+  onDayHoverEnd
 }: RegionSectionProps) {
   const [tooltipData, setTooltipData] = useState<TooltipData | null>(null);
   const tileRefs = useRef<Map<string, React.RefObject<CompositeTileRef | null>>>(new Map());
@@ -64,26 +82,41 @@ export function RegionSection({
     return totalCapacity > 0 ? totalWeightedCapacityFactor / totalCapacity : null;
   }, [facilities, animatedDateRange]);
   
+  // Show region average when showRegionAverage is true
+  React.useEffect(() => {
+    if (showRegionAverage && animatedDateRange) {
+      const avgCapacityFactor = calculateRegionAverage();
+      if (avgCapacityFactor !== null) {
+        handleHover({
+          startDate: animatedDateRange.start,
+          endDate: animatedDateRange.end,
+          label: regionName,
+          capacityFactor: avgCapacityFactor,
+          tooltipType: 'period'
+        });
+      }
+    } else if (!showRegionAverage) {
+      handleHoverEnd();
+    }
+  }, [showRegionAverage, animatedDateRange, calculateRegionAverage, regionName, handleHover, handleHoverEnd]);
+  
   return (
     <div key={regionCode} className="opennem-region">
       <div className="opennem-region-header">
         <span 
           style={{ cursor: 'pointer' }}
           onMouseEnter={() => {
-            if (animatedDateRange) {
-              const avgCapacityFactor = calculateRegionAverage();
-              if (avgCapacityFactor !== null) {
-                handleHover({
-                  startDate: animatedDateRange.start,
-                  endDate: animatedDateRange.end,
-                  label: regionName,
-                  capacityFactor: avgCapacityFactor,
-                  tooltipType: 'period'
-                });
-              }
+            // Trigger all regions to show their averages
+            if (onRegionHover) {
+              onRegionHover();
+            }
+          }}
+          onMouseLeave={() => {
+            // Hide all region averages
+            if (onRegionHoverEnd) {
+              onRegionHoverEnd();
             }
           }}
-          onMouseLeave={handleHoverEnd}
         >
           {regionName}
         </span>
@@ -108,6 +141,9 @@ export function RegionSection({
                   onHover={handleHover}
                   onHoverEnd={handleHoverEnd}
                   minCanvasHeight={25}
+                  hoveredDay={hoveredDay}
+                  onDayHover={onDayHover}
+                  onDayHoverEnd={onDayHoverEnd}
                 />
               );
             })}
@@ -119,6 +155,9 @@ export function RegionSection({
               onHover={handleHover}
               onHoverEnd={handleHoverEnd}
               onMonthClick={onMonthClick}
+              hoveredMonth={hoveredMonth}
+              onMonthHover={onMonthHover}
+              onMonthHoverEnd={onMonthHoverEnd}
             />
           </div>
         )}
